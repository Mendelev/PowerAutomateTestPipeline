# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: PowerPlatformToolInstaller@2
  inputs:
    DefaultVersion: true

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $root = "$(Build.SourcesDirectory)"
      $zips = Get-ChildItem -Path $root -Recurse -Filter *.zip | Sort-Object LastWriteTime -Descending
      if(-not $zips) { throw "Nenhum .zip encontrado em $root" }
      $picked = $zips[0].FullName
      $dest = Join-Path "$(Build.ArtifactStagingDirectory)" "solution.zip"
      New-Item -ItemType Directory -Force -Path "$(Build.ArtifactStagingDirectory)" | Out-Null
      Copy-Item $picked $dest -Force
      Write-Host "##vso[task.setvariable variable=SolutionZip]$dest"
      Write-Host "Selecionado: $picked -> $dest"

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Caminhos
      $zip = "$(SolutionZip)"  # você já tem essa variável da etapa que escolhe/renomeia o .zip
      $out = "$(Build.ArtifactStagingDirectory)/deployment.settings.json"
      
      # Gera o template de settings (EVs + Connection References) a partir do ZIP
      pac solution create-settings --solution-zip $zip --settings-file $out
      
      Write-Host "##vso[task.setvariable variable=DeploymentSettingsFile]$out"
      Write-Host "Gerado: $out"


- task: PowerPlatformImportSolution@2
  inputs:
    authenticationType: 'PowerPlatformSPN'
    PowerPlatformSPN: 'Teste-Pipeline-PowerAutomate'
    SolutionInputFile: '$(SolutionZip)'
    AsyncOperation: true
    MaxAsyncWaitTime: '60'
    StageAndUpgrade: false